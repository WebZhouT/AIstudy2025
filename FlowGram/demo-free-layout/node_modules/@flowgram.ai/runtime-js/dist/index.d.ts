declare enum FlowGramAPIName {
    ServerInfo = "ServerInfo",
    TaskRun = "TaskRun",
    TaskReport = "TaskReport",
    TaskResult = "TaskResult",
    TaskCancel = "TaskCancel",
    Validation = "Validation"
}

type WorkflowInputs = Record<string, any>;
type WorkflowOutputs = Record<string, any>;

declare enum WorkflowStatus {
    Pending = "pending",
    Processing = "processing",
    Succeeded = "succeeded",
    Failed = "failed",
    Canceled = "canceled"
}
interface StatusData {
    status: WorkflowStatus;
    terminated: boolean;
    startTime: number;
    endTime?: number;
    timeCost: number;
}

interface SnapshotData {
    nodeID: string;
    inputs: WorkflowInputs;
    outputs: WorkflowOutputs;
    data: any;
    branch?: string;
}
interface Snapshot extends SnapshotData {
    id: string;
}

interface NodeReport extends StatusData {
    id: string;
    snapshots: Snapshot[];
}
interface IReport {
    id: string;
    inputs: WorkflowInputs;
    outputs: WorkflowOutputs;
    workflowStatus: StatusData;
    reports: Record<string, NodeReport>;
}

interface TaskRunInput {
    inputs: WorkflowInputs;
    schema: string;
}
interface TaskRunOutput {
    taskID: string;
}

interface TaskReportInput {
    taskID: string;
}
type TaskReportOutput = IReport | undefined;

interface TaskResultInput {
    taskID: string;
}
type TaskResultOutput = WorkflowOutputs | undefined;

interface TaskCancelInput {
    taskID: string;
}
type TaskCancelOutput = {
    success: boolean;
};

declare const TaskRunAPI: (input: TaskRunInput) => Promise<TaskRunOutput>;

declare const TaskResultAPI: (input: TaskResultInput) => Promise<TaskResultOutput>;

declare const TaskReportAPI: (input: TaskReportInput) => Promise<TaskReportOutput>;

declare const TaskCancelAPI: (input: TaskCancelInput) => Promise<TaskCancelOutput>;

declare const WorkflowRuntimeAPIs: Record<FlowGramAPIName, (i: any) => any>;

export { TaskCancelAPI, TaskReportAPI, TaskResultAPI, TaskRunAPI, WorkflowRuntimeAPIs };
