// src/api/validation/index.ts
import z from "zod";

// src/api/constant.ts
var FlowGramAPIMethod = /* @__PURE__ */ ((FlowGramAPIMethod2) => {
  FlowGramAPIMethod2["GET"] = "GET";
  FlowGramAPIMethod2["POST"] = "POST";
  FlowGramAPIMethod2["PUT"] = "PUT";
  FlowGramAPIMethod2["DELETE"] = "DELETE";
  FlowGramAPIMethod2["PATCH"] = "PATCH";
  return FlowGramAPIMethod2;
})(FlowGramAPIMethod || {});
var FlowGramAPIName = /* @__PURE__ */ ((FlowGramAPIName2) => {
  FlowGramAPIName2["ServerInfo"] = "ServerInfo";
  FlowGramAPIName2["TaskRun"] = "TaskRun";
  FlowGramAPIName2["TaskReport"] = "TaskReport";
  FlowGramAPIName2["TaskResult"] = "TaskResult";
  FlowGramAPIName2["TaskCancel"] = "TaskCancel";
  FlowGramAPIName2["Validation"] = "Validation";
  return FlowGramAPIName2;
})(FlowGramAPIName || {});
var FlowGramAPIModule = /* @__PURE__ */ ((FlowGramAPIModule2) => {
  FlowGramAPIModule2["Info"] = "Info";
  FlowGramAPIModule2["Task"] = "Task";
  FlowGramAPIModule2["Validation"] = "Validation";
  return FlowGramAPIModule2;
})(FlowGramAPIModule || {});

// src/api/validation/index.ts
var ValidationDefine = {
  name: "Validation" /* Validation */,
  method: "POST" /* POST */,
  path: "/validation",
  module: "Validation" /* Validation */,
  schema: {
    input: z.object({
      schema: z.string()
    }),
    output: z.object({
      valid: z.boolean(),
      nodeErrors: z.array(
        z.object({
          message: z.string(),
          nodeID: z.string()
        })
      ),
      edgeErrors: z.array(
        z.object({
          message: z.string(),
          edge: z.object({
            sourceNodeID: z.string(),
            targetNodeID: z.string(),
            sourcePortID: z.string().optional(),
            targetPortID: z.string().optional()
          })
        })
      )
    })
  }
};

// src/api/task-run/index.ts
import z3 from "zod";

// src/api/schema.ts
import z2 from "zod";
var WorkflowIOZodSchema = z2.record(z2.string(), z2.any());
var WorkflowSnapshotZodSchema = z2.object({
  id: z2.string(),
  nodeID: z2.string(),
  inputs: WorkflowIOZodSchema,
  outputs: WorkflowIOZodSchema.optional(),
  data: WorkflowIOZodSchema,
  branch: z2.string().optional()
});
var WorkflowStatusZodShape = {
  status: z2.string(),
  terminated: z2.boolean(),
  startTime: z2.number(),
  endTime: z2.number().optional(),
  timeCost: z2.number()
};
var WorkflowStatusZodSchema = z2.object(WorkflowStatusZodShape);
var WorkflowZodSchema = {
  Inputs: WorkflowIOZodSchema,
  Outputs: WorkflowIOZodSchema,
  Status: WorkflowStatusZodSchema,
  Snapshot: WorkflowSnapshotZodSchema,
  NodeReport: z2.object({
    id: z2.string(),
    ...WorkflowStatusZodShape,
    snapshots: z2.array(WorkflowSnapshotZodSchema)
  })
};

// src/api/task-run/index.ts
var TaskRunDefine = {
  name: "TaskRun" /* TaskRun */,
  method: "POST" /* POST */,
  path: "/task/run",
  module: "Task" /* Task */,
  schema: {
    input: z3.object({
      schema: z3.string(),
      inputs: WorkflowZodSchema.Inputs
    }),
    output: z3.object({
      taskID: z3.string()
    })
  }
};

// src/api/task-result/index.ts
import z4 from "zod";
var TaskResultDefine = {
  name: "TaskResult" /* TaskResult */,
  method: "GET" /* GET */,
  path: "/task/result",
  module: "Task" /* Task */,
  schema: {
    input: z4.object({
      taskID: z4.string()
    }),
    output: WorkflowZodSchema.Outputs
  }
};

// src/api/task-report/index.ts
import z5 from "zod";
var TaskReportDefine = {
  name: "TaskReport" /* TaskReport */,
  method: "GET" /* GET */,
  path: "/task/report",
  module: "Task" /* Task */,
  schema: {
    input: z5.object({
      taskID: z5.string()
    }),
    output: z5.object({
      id: z5.string(),
      inputs: WorkflowZodSchema.Inputs,
      outputs: WorkflowZodSchema.Outputs,
      workflowStatus: WorkflowZodSchema.Status,
      reports: z5.record(z5.string(), WorkflowZodSchema.NodeReport)
    })
  }
};

// src/api/task-cancel/index.ts
import z6 from "zod";
var TaskCancelDefine = {
  name: "TaskCancel" /* TaskCancel */,
  method: "PUT" /* PUT */,
  path: "/task/cancel",
  module: "Task" /* Task */,
  schema: {
    input: z6.object({
      taskID: z6.string()
    }),
    output: z6.object({
      success: z6.boolean()
    })
  }
};

// src/api/server-info/index.ts
import z7 from "zod";
var ServerInfoDefine = {
  name: "ServerInfo" /* ServerInfo */,
  method: "GET" /* GET */,
  path: "/info",
  module: "Info" /* Info */,
  schema: {
    input: z7.undefined(),
    output: z7.object({
      name: z7.string(),
      runtime: z7.string(),
      version: z7.string(),
      time: z7.string()
    })
  }
};

// src/api/define.ts
var FlowGramAPIs = {
  ["ServerInfo" /* ServerInfo */]: ServerInfoDefine,
  ["TaskRun" /* TaskRun */]: TaskRunDefine,
  ["TaskReport" /* TaskReport */]: TaskReportDefine,
  ["TaskResult" /* TaskResult */]: TaskResultDefine,
  ["TaskCancel" /* TaskCancel */]: TaskCancelDefine,
  ["Validation" /* Validation */]: ValidationDefine
};
var FlowGramAPINames = Object.keys(FlowGramAPIs);

// src/schema/constant.ts
var WorkflowPortType = /* @__PURE__ */ ((WorkflowPortType2) => {
  WorkflowPortType2["Input"] = "input";
  WorkflowPortType2["Output"] = "output";
  return WorkflowPortType2;
})(WorkflowPortType || {});
var WorkflowVariableType = /* @__PURE__ */ ((WorkflowVariableType2) => {
  WorkflowVariableType2["String"] = "string";
  WorkflowVariableType2["Integer"] = "integer";
  WorkflowVariableType2["Number"] = "number";
  WorkflowVariableType2["Boolean"] = "boolean";
  WorkflowVariableType2["Object"] = "object";
  WorkflowVariableType2["Array"] = "array";
  WorkflowVariableType2["Null"] = "null";
  return WorkflowVariableType2;
})(WorkflowVariableType || {});

// src/node/constant.ts
var FlowGramNode = /* @__PURE__ */ ((FlowGramNode2) => {
  FlowGramNode2["Root"] = "root";
  FlowGramNode2["Start"] = "start";
  FlowGramNode2["End"] = "end";
  FlowGramNode2["LLM"] = "llm";
  FlowGramNode2["code"] = "code";
  FlowGramNode2["Condition"] = "condition";
  FlowGramNode2["Loop"] = "loop";
  FlowGramNode2["Comment"] = "comment";
  FlowGramNode2["Group"] = "group";
  return FlowGramNode2;
})(FlowGramNode || {});

// src/runtime/engine/index.ts
var IEngine = Symbol.for("Engine");

// src/runtime/executor/executor.ts
var IExecutor = Symbol.for("Executor");

// src/runtime/status/index.ts
var WorkflowStatus = /* @__PURE__ */ ((WorkflowStatus2) => {
  WorkflowStatus2["Pending"] = "pending";
  WorkflowStatus2["Processing"] = "processing";
  WorkflowStatus2["Succeeded"] = "succeeded";
  WorkflowStatus2["Failed"] = "failed";
  WorkflowStatus2["Canceled"] = "canceled";
  return WorkflowStatus2;
})(WorkflowStatus || {});

// src/runtime/validation/index.ts
var IValidation = Symbol.for("Validation");
export {
  FlowGramAPIMethod,
  FlowGramAPIModule,
  FlowGramAPIName,
  FlowGramAPINames,
  FlowGramAPIs,
  FlowGramNode,
  IEngine,
  IExecutor,
  IValidation,
  ServerInfoDefine,
  TaskCancelDefine,
  TaskReportDefine,
  TaskResultDefine,
  TaskRunDefine,
  ValidationDefine,
  WorkflowPortType,
  WorkflowStatus,
  WorkflowVariableType
};
//# sourceMappingURL=index.js.map