{"version":3,"sources":["../src/index.ts","../src/api/validation/index.ts","../src/api/constant.ts","../src/api/task-run/index.ts","../src/api/schema.ts","../src/api/task-result/index.ts","../src/api/task-report/index.ts","../src/api/task-cancel/index.ts","../src/api/server-info/index.ts","../src/api/define.ts","../src/schema/constant.ts","../src/node/constant.ts","../src/runtime/engine/index.ts","../src/runtime/executor/executor.ts","../src/runtime/status/index.ts","../src/runtime/validation/index.ts"],"sourcesContent":["export * from './api';\nexport * from './schema';\nexport * from './node';\nexport * from './runtime';\nexport * from './client';\n","import z from 'zod';\n\nimport { ValidationResult } from '@runtime/index';\nimport { FlowGramAPIDefine } from '@api/type';\nimport { FlowGramAPIMethod, FlowGramAPIModule, FlowGramAPIName } from '@api/constant';\n\nexport interface ValidationReq {\n  schema: string;\n}\n\nexport interface ValidationRes extends ValidationResult {}\n\nexport const ValidationDefine: FlowGramAPIDefine = {\n  name: FlowGramAPIName.Validation,\n  method: FlowGramAPIMethod.POST,\n  path: '/validation',\n  module: FlowGramAPIModule.Validation,\n  schema: {\n    input: z.object({\n      schema: z.string(),\n    }),\n    output: z.object({\n      valid: z.boolean(),\n      nodeErrors: z.array(\n        z.object({\n          message: z.string(),\n          nodeID: z.string(),\n        })\n      ),\n      edgeErrors: z.array(\n        z.object({\n          message: z.string(),\n          edge: z.object({\n            sourceNodeID: z.string(),\n            targetNodeID: z.string(),\n            sourcePortID: z.string().optional(),\n            targetPortID: z.string().optional(),\n          }),\n        })\n      ),\n    }),\n  },\n};\n","export enum FlowGramAPIMethod {\n  GET = 'GET',\n  POST = 'POST',\n  PUT = 'PUT',\n  DELETE = 'DELETE',\n  PATCH = 'PATCH',\n}\n\nexport enum FlowGramAPIName {\n  ServerInfo = 'ServerInfo',\n  TaskRun = 'TaskRun',\n  TaskReport = 'TaskReport',\n  TaskResult = 'TaskResult',\n  TaskCancel = 'TaskCancel',\n  Validation = 'Validation',\n}\n\nexport enum FlowGramAPIModule {\n  Info = 'Info',\n  Task = 'Task',\n  Validation = 'Validation',\n}\n","import z from 'zod';\n\nimport { WorkflowInputs } from '@runtime/index';\nimport { FlowGramAPIDefine } from '@api/type';\nimport { WorkflowZodSchema } from '@api/schema';\nimport { FlowGramAPIMethod, FlowGramAPIModule, FlowGramAPIName } from '@api/constant';\n\nexport interface TaskRunInput {\n  inputs: WorkflowInputs;\n  schema: string;\n}\n\nexport interface TaskRunOutput {\n  taskID: string;\n}\n\nexport const TaskRunDefine: FlowGramAPIDefine = {\n  name: FlowGramAPIName.TaskRun,\n  method: FlowGramAPIMethod.POST,\n  path: '/task/run',\n  module: FlowGramAPIModule.Task,\n  schema: {\n    input: z.object({\n      schema: z.string(),\n      inputs: WorkflowZodSchema.Inputs,\n    }),\n    output: z.object({\n      taskID: z.string(),\n    }),\n  },\n};\n","import z from 'zod';\n\nconst WorkflowIOZodSchema = z.record(z.string(), z.any());\nconst WorkflowSnapshotZodSchema = z.object({\n  id: z.string(),\n  nodeID: z.string(),\n  inputs: WorkflowIOZodSchema,\n  outputs: WorkflowIOZodSchema.optional(),\n  data: WorkflowIOZodSchema,\n  branch: z.string().optional(),\n});\nconst WorkflowStatusZodShape = {\n  status: z.string(),\n  terminated: z.boolean(),\n  startTime: z.number(),\n  endTime: z.number().optional(),\n  timeCost: z.number(),\n};\nconst WorkflowStatusZodSchema = z.object(WorkflowStatusZodShape);\n\nexport const WorkflowZodSchema = {\n  Inputs: WorkflowIOZodSchema,\n  Outputs: WorkflowIOZodSchema,\n  Status: WorkflowStatusZodSchema,\n  Snapshot: WorkflowSnapshotZodSchema,\n  NodeReport: z.object({\n    id: z.string(),\n    ...WorkflowStatusZodShape,\n    snapshots: z.array(WorkflowSnapshotZodSchema),\n  }),\n};\n","import z from 'zod';\n\nimport { WorkflowOutputs } from '@runtime/index';\nimport { FlowGramAPIDefine } from '@api/type';\nimport { WorkflowZodSchema } from '@api/schema';\nimport { FlowGramAPIName, FlowGramAPIMethod, FlowGramAPIModule } from '@api/constant';\n\nexport interface TaskResultInput {\n  taskID: string;\n}\n\nexport type TaskResultOutput = WorkflowOutputs | undefined;\n\nexport const TaskResultDefine: FlowGramAPIDefine = {\n  name: FlowGramAPIName.TaskResult,\n  method: FlowGramAPIMethod.GET,\n  path: '/task/result',\n  module: FlowGramAPIModule.Task,\n  schema: {\n    input: z.object({\n      taskID: z.string(),\n    }),\n    output: WorkflowZodSchema.Outputs,\n  },\n};\n","import z from 'zod';\n\nimport { IReport } from '@runtime/index';\nimport { FlowGramAPIDefine } from '@api/type';\nimport { WorkflowZodSchema } from '@api/schema';\nimport { FlowGramAPIName, FlowGramAPIMethod, FlowGramAPIModule } from '@api/constant';\n\nexport interface TaskReportInput {\n  taskID: string;\n}\n\nexport type TaskReportOutput = IReport | undefined;\n\nexport const TaskReportDefine: FlowGramAPIDefine = {\n  name: FlowGramAPIName.TaskReport,\n  method: FlowGramAPIMethod.GET,\n  path: '/task/report',\n  module: FlowGramAPIModule.Task,\n  schema: {\n    input: z.object({\n      taskID: z.string(),\n    }),\n    output: z.object({\n      id: z.string(),\n      inputs: WorkflowZodSchema.Inputs,\n      outputs: WorkflowZodSchema.Outputs,\n      workflowStatus: WorkflowZodSchema.Status,\n      reports: z.record(z.string(), WorkflowZodSchema.NodeReport),\n    }),\n  },\n};\n","import z from 'zod';\n\nimport { FlowGramAPIDefine } from '@api/type';\nimport { FlowGramAPIName, FlowGramAPIMethod, FlowGramAPIModule } from '@api/constant';\n\nexport interface TaskCancelInput {\n  taskID: string;\n}\n\nexport type TaskCancelOutput = {\n  success: boolean;\n};\n\nexport const TaskCancelDefine: FlowGramAPIDefine = {\n  name: FlowGramAPIName.TaskCancel,\n  method: FlowGramAPIMethod.PUT,\n  path: '/task/cancel',\n  module: FlowGramAPIModule.Task,\n  schema: {\n    input: z.object({\n      taskID: z.string(),\n    }),\n    output: z.object({\n      success: z.boolean(),\n    }),\n  },\n};\n","import z from 'zod';\n\nimport { type FlowGramAPIDefine } from '@api/type';\nimport { FlowGramAPIMethod, FlowGramAPIModule, FlowGramAPIName } from '@api/constant';\n\nexport interface ServerInfoInput {}\n\nexport interface ServerInfoOutput {\n  name: string;\n  title: string;\n  description: string;\n  runtime: string;\n  version: string;\n  time: string;\n}\n\nexport const ServerInfoDefine: FlowGramAPIDefine = {\n  name: FlowGramAPIName.ServerInfo,\n  method: FlowGramAPIMethod.GET,\n  path: '/info',\n  module: FlowGramAPIModule.Info,\n  schema: {\n    input: z.undefined(),\n    output: z.object({\n      name: z.string(),\n      runtime: z.string(),\n      version: z.string(),\n      time: z.string(),\n    }),\n  },\n};\n","import { ValidationDefine } from './validation';\nimport { FlowGramAPIDefines } from './type';\nimport { TaskRunDefine } from './task-run';\nimport { TaskResultDefine } from './task-result';\nimport { TaskReportDefine } from './task-report';\nimport { TaskCancelDefine } from './task-cancel';\nimport { ServerInfoDefine } from './server-info';\nimport { FlowGramAPIName } from './constant';\n\nexport const FlowGramAPIs: FlowGramAPIDefines = {\n  [FlowGramAPIName.ServerInfo]: ServerInfoDefine,\n  [FlowGramAPIName.TaskRun]: TaskRunDefine,\n  [FlowGramAPIName.TaskReport]: TaskReportDefine,\n  [FlowGramAPIName.TaskResult]: TaskResultDefine,\n  [FlowGramAPIName.TaskCancel]: TaskCancelDefine,\n  [FlowGramAPIName.Validation]: ValidationDefine,\n};\n\nexport const FlowGramAPINames = Object.keys(FlowGramAPIs) as FlowGramAPIName[];\n","export enum WorkflowPortType {\n  Input = 'input',\n  Output = 'output',\n}\n\nexport enum WorkflowVariableType {\n  String = 'string',\n  Integer = 'integer',\n  Number = 'number',\n  Boolean = 'boolean',\n  Object = 'object',\n  Array = 'array',\n  Null = 'null',\n}\n","export enum FlowGramNode {\n  Root = 'root',\n  Start = 'start',\n  End = 'end',\n  LLM = 'llm',\n  code = 'code',\n  Condition = 'condition',\n  Loop = 'loop',\n  Comment = 'comment',\n  Group = 'group',\n}\n","import { ITask } from '../task';\nimport { IExecutor } from '../executor';\nimport { INode } from '../document';\nimport { IContext } from '../context';\nimport { InvokeParams } from '../base';\n\nexport interface EngineServices {\n  Executor: IExecutor;\n}\n\nexport interface IEngine {\n  invoke(params: InvokeParams): ITask;\n  executeNode(params: { context: IContext; node: INode }): Promise<void>;\n}\n\nexport const IEngine = Symbol.for('Engine');\n","import { ExecutionContext, ExecutionResult, INodeExecutor } from './node-executor';\n\nexport interface IExecutor {\n  execute: (context: ExecutionContext) => Promise<ExecutionResult>;\n  register: (executor: INodeExecutor) => void;\n}\n\nexport const IExecutor = Symbol.for('Executor');\n","export enum WorkflowStatus {\n  Pending = 'pending',\n  Processing = 'processing',\n  Succeeded = 'succeeded',\n  Failed = 'failed',\n  Canceled = 'canceled',\n}\n\nexport interface StatusData {\n  status: WorkflowStatus;\n  terminated: boolean;\n  startTime: number;\n  endTime?: number;\n  timeCost: number;\n}\n\nexport interface IStatus extends StatusData {\n  id: string;\n  process(): void;\n  success(): void;\n  fail(): void;\n  cancel(): void;\n  export(): StatusData;\n}\n\nexport interface IStatusCenter {\n  workflow: IStatus;\n  nodeStatus(nodeID: string): IStatus;\n  init(): void;\n  dispose(): void;\n  getStatusNodeIDs(status: WorkflowStatus): string[];\n  exportNodeStatus(): Record<string, StatusData>;\n}\n","import { WorkflowSchema } from '@schema/index';\n\nexport interface ValidationResult {\n  valid: boolean;\n  errors?: string[];\n}\n\nexport interface IValidation {\n  validate(schema: WorkflowSchema): ValidationResult;\n}\n\nexport const IValidation = Symbol.for('Validation');\n"],"mappings":"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","names":["FlowGramAPIMethod","FlowGramAPIName","FlowGramAPIModule","z","import_zod","import_zod","z","z","import_zod","z","import_zod","z","import_zod","z","import_zod","z","WorkflowPortType","WorkflowVariableType","FlowGramNode","WorkflowStatus"]}